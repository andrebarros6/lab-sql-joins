# Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

# 1. List the number of films per category.
SELECT c.name, 
		COUNT(fc.category_id) AS number_of_films
FROM film_category fc
INNER JOIN category c 
ON fc.category_id = c.category_id
GROUP BY fc.category_id
ORDER BY number_of_films DESC;

# 2. Retrieve the store ID, city, and country for each store.

/*#getting the city_id of each store
SELECT s.store_id, a.city_id
FROM store s
INNER JOIN address a
ON s.address_id = a.address_id;

# get the country from city_id
SELECT ci.city_id AS city_id,
		ci.city AS city,
		c.country AS country
FROM city as ci
INNER JOIN country as c
ON ci.country_id = c.country_id;*/


#join everything in a single table
SELECT sto.store_id AS store_id,
		places.city AS city,
		places.country AS country
FROM (SELECT s.store_id, a.city_id
	FROM store s
	INNER JOIN address a
	ON s.address_id = a.address_id) AS sto
	INNER JOIN(	SELECT ci.city_id AS city_id,
			ci.city AS city,
			c.country AS country
			FROM city as ci
			INNER JOIN country as c
			ON ci.country_id = c.country_id
            ) AS places
ON places.city_id = sto.city_id;
	

# 3. Calculate the total revenue generated by each store in dollars.
SELECT staff_id AS store, SUM(amount) AS total_revenue 
FROM payment
GROUP BY staff_id;

/* as there are only 2 stores and the staff is identified by a relational id to the store we can shorten this exercise 
 to the query above. Even if, it is mentioned in the documentation that the staff can work in a different store,
 there is no indication in this payment  */


# 4. Determine the average running time of films for each category.
SELECT 	cat.category_name AS category_name,
        ROUND(AVG(f.length), 2) AS avg_duration
FROM film as f
INNER JOIN (
		SELECT  c.name AS category_name,
		film_id AS film_id,
        c.category_id AS category_id
		FROM category as c
		INNER JOIN film_category as fc
		ON fc.category_id = c.category_id
		) as cat
ON f.film_id = cat.film_id
GROUP BY category_name;


#Bonus:
# 5. Identify the film categories with the longest average running time.
SELECT ROUND(AVG(f.length), 2) AS avg_duration,
		cat.category_name AS category_name
FROM film as f
INNER JOIN (
		SELECT  c.name AS category_name,
		film_id AS film_id,
        c.category_id AS category_id
		FROM category as c
		INNER JOIN film_category as fc
		ON fc.category_id = c.category_id
		) as cat
ON f.film_id = cat.film_id
GROUP BY category_name
ORDER BY avg_duration DESC
LIMIT 5; #top 5 categories with longest average running time


# 6. Display the top 10 most frequently rented movies in descending order.
# 7. Determine if "Academy Dinosaur" can be rented from Store 1.
# 8. Provide a list of all distinct film titles, along with their availability 
#status in the inventory. Include a column indicating whether each title is 'Available' 
#or 'NOT available.' Note that there are 42 titles that are not in the inventory, and 
#this information can be obtained using a CASE statement combined with IFNULL."
